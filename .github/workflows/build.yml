name: Build and Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t mydemoapp:latest .
        working-directory: ./MyDemoApp

      - name: Save Docker image as artifact
        run: docker save mydemoapp:latest -o mydemoapp.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: mydemoapp-image
          path: mydemoapp.tar
          retention-days: 1

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: mydemoapp-image
          path: .

      - name: Load Docker image
        run: docker load -i mydemoapp.tar

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v0.65.0/trivy_0.65.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.65.0_Linux-64bit.deb

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --format json --output trivy-report.json mydemoapp:latest
          trivy image --format table mydemoapp:latest

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-report.json
          retention-days: 1

  owasp-zap-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: mydemoapp-image
          path: .

      - name: Load and run Docker image
        run: |
          docker load -i mydemoapp.tar
          docker run -d -p 5173:5173 --name test-app mydemoapp:latest
          
          # Wait for the application to be ready
          echo "Waiting for application to start..."
          sleep 15
          
          # Check if the application is responding
          for i in {1..30}; do
            if curl -f http://localhost:5173 > /dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 2
          done
          
          # Final check
          curl -f http://localhost:5173 || (echo "Application failed to start" && docker logs test-app && exit 1)

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:5173'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          allow_issue_writing: false
          fail_action: false

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-zap-report
          path: |
            report_html.html
            report_json.json
            report_md.md
          retention-days: 1

      - name: Stop Docker container
        run: docker stop test-app
        if: always()